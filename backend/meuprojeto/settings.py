"""
Django settings for meuprojeto project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv

# Carrega as variáveis de ambiente do arquivo .env no início de tudo
load_dotenv()

# Caminho base do projeto Django (aponta para a pasta 'backend')
BASE_DIR = Path(__file__).resolve().parent.parent


# ==============================================================================
# CONFIGURAÇÕES DE SEGURANÇA E CORE
# ==============================================================================

# URL para onde os usuários não logados são redirecionados por @login_required
LOGIN_URL = "/login/"

# ATENÇÃO: Mantenha a SECRET_KEY segura em produção! Lida do .env
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    # Chave insegura usada apenas se a variável de ambiente não for encontrada
    "django-insecure-!br2&^#7(^l@4(*&r$p^3+n3)6&97jsr%=zq1y(xar0&e92z%)",
)

# ATENÇÃO: DEBUG=True nunca deve ser usado em produção! Lida do .env
DEBUG = os.environ.get("DJANGO_DEBUG", "False") == "True"

# Hosts permitidos. Em produção, deve ser o seu domínio. Ex: "www.meusite.com,meusite.com"
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

# Define nosso modelo de usuário customizado como o padrão para o projeto
AUTH_USER_MODEL = "core.Usuario"


# ==============================================================================
# DEFINIÇÃO DAS APLICAÇÕES (APPS)
# ==============================================================================

INSTALLED_APPS = [
    # Apps padrão do Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Apps de terceiros
    "rest_framework",
    "corsheaders",
    # Nossas apps
    "core.apps.CoreConfig",
]


# ==============================================================================
# MIDDLEWARE
# ==============================================================================

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # WhiteNoise para servir arquivos estáticos em produção de forma eficiente
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # Middleware do CORS, importante que venha antes de CommonMiddleware
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

# Aponta para o arquivo de URLs principal do projeto
ROOT_URLCONF = "meuprojeto.urls"


# ==============================================================================
# TEMPLATES
# ==============================================================================

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Diz ao Django para procurar templates na pasta 'templates' na raiz do projeto Django (backend/templates)
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,  # Também procura templates dentro de cada app (ex: core/templates/)
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "meuprojeto.wsgi.application"


# ==============================================================================
# BANCO DE DADOS
# ==============================================================================

DATABASE_URL = os.environ.get("DATABASE_URL")

if DATABASE_URL:
    # Configuração para produção (lê a URL do PostgreSQL do ambiente)
    DATABASES = {
        "default": dj_database_url.config(
            default=DATABASE_URL, conn_max_age=600, ssl_require=True
        )
    }
else:
    # Configuração para desenvolvimento local (usa um arquivo de banco de dados simples)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# ==============================================================================
# VALIDAÇÃO DE SENHAS
# ==============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# ==============================================================================
# INTERNACIONALIZAÇÃO (I18N)
# ==============================================================================

LANGUAGE_CODE = "pt-br"
TIME_ZONE = "America/Sao_Paulo"
USE_I18N = True
USE_TZ = True


# ==============================================================================
# ARQUIVOS ESTÁTICOS E DE MÍDIA
# ==============================================================================

# URL para acessar os arquivos estáticos no navegador
STATIC_URL = "static/"

# Diretório onde o comando 'collectstatic' irá copiar todos os arquivos para produção
# Este caminho é relativo à pasta raiz do projeto (onde fica o manage.py)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles_build")

# Diretórios adicionais onde o Django deve procurar por arquivos estáticos
# CORREÇÃO DEFINITIVA APLICADA AQUI:
# Aponta para a pasta 'static' que está DENTRO da pasta 'backend'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# URL para acessar arquivos de mídia (uploads de usuários)
MEDIA_URL = "/media/"
# Diretório no servidor onde os arquivos de mídia serão armazenados
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")


# ==============================================================================
# CONFIGURAÇÕES DE TERCEIROS (CORS)
# ==============================================================================

# Lista de origens permitidas para fazer requisições ao seu backend
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Para React
    "http://localhost:5173",  # Para Vite (React, Vue)
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
]
# Para desenvolvimento, você pode descomentar a linha abaixo para permitir tudo
# CORS_ALLOW_ALL_ORIGINS = True


# ==============================================================================
# CONFIGURAÇÕES PADRÃO DO DJANGO
# ==============================================================================

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
